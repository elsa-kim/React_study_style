// 컴포넌트 스타일링
/*
CSS : CSS 클래스 중복되지 않게 만드는 것 중요 => 이름 지을 때 특별한 규칙 사용하거나 CSS Selector 활용
  - 이름 짓는 규칙 : 클래스 이름에 컴포넌트 이름 포함시킴, BEM 네이밍(해당 클래스가 어디에서 어떤 용도로 사용되는지 명확히 작성 ex) .card_title-primary)
  - CSS Selector : CSS 클래스가 특정 클래스 내부에 있는 경우에만 스타일 적용

Sass(Syntactically Awesome Style Sheets) : CSS 전처리기로 복잡한 작업 쉽게 할 수 있고 스타일 코드 재활용성 높임, 코드 가독성 높여 유지보수 쉽게 함
  - .scss, .sass 확장자 지원 : sass 확장자는 중괄호와 세미콜론 사용X, scss 확장자는 기존 CSS 빙식과 문법 크게 다르지 않음
  - 라이브러리 쉽게 불러와 사용할 수 있음 : 물결 문자(~) 사용

CSS Module : CSS 불러와서 사용할 때 클래스 이름을 고유한 값, 즉 [파일이름]_[클래스이름]_[해시값] 형태로 자동으로 만들어 컴포넌트 스타일 클래스 이름이 중첩되는 현상 방지
  - .module.css 확장자로 저장하면 CSS Module 적용
  - 클래스를 적용하고 싶은 JSX 엘리먼트에 className={styles.클래스이름} 형태로 전달
  - :global 사용해 전역적으로 선언한 클래스는 일반 CSS에서처럼 문자열로 넣어줌
  - 함께 사용
    1. classnames : CSS 클래스를 조건부로 설정할 때 유용한 라이브러리, 여러 종류의 파라미터를 조합해 CSS 클래스 설정할 수 있어 컴포넌트에서 조건부로 클래스 설정할 때 편함
    2. Sass
  - CSS Module 아닌 파일에서 CSS Module 사용 : CSS Module에서 글로벙 클래스 정의할 때 :global 사용했던 것처럼
      CSS Module 아닌 일반 .css/.scss 파일에서도 :local 사용해 CSS Module 사용 가능

styled-components : CSS-in-JS(자바스크립트 파일 안에 스타일 선언) 라이브러리 중 개발자들이 가장 선호, 자바스크립트 파일 하나에 스타일까지 작성할 수 있어 .css, .scss 확장자 가진 스타일 파일 따로 만들지 않아도 된다는 이점
  - props값으로 전달해 주는 값을 쉽게 스타일에 적용할 수 있음
  - Tagged Template Literals : 문자열에서 변수들과 정적인 문자열 구분 가능, 일반적 함수 호출방식인 함수명()이 아니라 함수명`` 형태로 호출
      템플릿 사이사이 들어가는 자바스크립트 객체나 함수의 원본 값 그대로 추출할 수 있음, 이런 속성을 사용해 styled-components로 만든 컴포넌트의 props를 스타일쪽에서 쉽게 조회할 수 있도록 해줌
  - 스타일링 된 엘리먼트 만들기 : 컴포넌트 상단에 styled 불러오고 styled.태그명 사용해 구현, 사용해야 할 태그명이 유동적이거나 특정 컴포넌트 자체에 스타일링 하고 싶을 경우 태그의 타입을 styled 함수의 인자로 전달하거나 컴포넌트 형식의 값을 넣어줌
  - styled-components 사용하면 스타일 쪽에서 컴포넌트에게 전달된 props 값 참조 가능 => 만들어진 코드 JSX에서 사용될 때 props 넣어주기
  - props로 조건부 스타일링 처리 가능(일반 CSS 클래스 사용시 className 사용해 조건부 스타일링)
  - 반응형 디자인 : 브라우저 가로 크기에 따른 스타일 적용 위해 일반 CSS 사용할 때와 똑같이 media 쿼리 사용 -> 함수화해 간편하게 사용 가능


*/
